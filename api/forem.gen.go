// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for DisplayAdAudienceSegmentType.
const (
	DarkTheme    DisplayAdAudienceSegmentType = "dark_theme"
	Experience1  DisplayAdAudienceSegmentType = "experience1"
	Experience2  DisplayAdAudienceSegmentType = "experience2"
	Experience3  DisplayAdAudienceSegmentType = "experience3"
	Experience4  DisplayAdAudienceSegmentType = "experience4"
	Experience5  DisplayAdAudienceSegmentType = "experience5"
	LightTheme   DisplayAdAudienceSegmentType = "light_theme"
	NoExperience DisplayAdAudienceSegmentType = "no_experience"
	NoPostsYet   DisplayAdAudienceSegmentType = "no_posts_yet"
	Posted       DisplayAdAudienceSegmentType = "posted"
	Testing      DisplayAdAudienceSegmentType = "testing"
	Trusted      DisplayAdAudienceSegmentType = "trusted"
)

// Defines values for DisplayAdDisplayTo.
const (
	DisplayAdDisplayToAll       DisplayAdDisplayTo = "all"
	DisplayAdDisplayToLoggedIn  DisplayAdDisplayTo = "logged_in"
	DisplayAdDisplayToLoggedOut DisplayAdDisplayTo = "logged_out"
)

// Defines values for DisplayAdPlacementArea.
const (
	FeedFirst    DisplayAdPlacementArea = "feed_first"
	FeedSecond   DisplayAdPlacementArea = "feed_second"
	FeedThird    DisplayAdPlacementArea = "feed_third"
	PostComments DisplayAdPlacementArea = "post_comments"
	PostSidebar  DisplayAdPlacementArea = "post_sidebar"
	SidebarLeft  DisplayAdPlacementArea = "sidebar_left"
	SidebarLeft2 DisplayAdPlacementArea = "sidebar_left_2"
	SidebarRight DisplayAdPlacementArea = "sidebar_right"
)

// Defines values for DisplayAdTypeOf.
const (
	Community DisplayAdTypeOf = "community"
	External  DisplayAdTypeOf = "external"
	InHouse   DisplayAdTypeOf = "in_house"
)

// Defines values for PageTemplate.
const (
	PageTemplateContained        PageTemplate = "contained"
	PageTemplateFullWithinLayout PageTemplate = "full_within_layout"
	PageTemplateJson             PageTemplate = "json"
	PageTemplateNavBarIncluded   PageTemplate = "nav_bar_included"
)

// Defines values for GetArticlesParamsState.
const (
	GetArticlesParamsStateAll    GetArticlesParamsState = "all"
	GetArticlesParamsStateFresh  GetArticlesParamsState = "fresh"
	GetArticlesParamsStateRising GetArticlesParamsState = "rising"
)

// Defines values for PostApiPagesJSONBodyTemplate.
const (
	PostApiPagesJSONBodyTemplateContained        PostApiPagesJSONBodyTemplate = "contained"
	PostApiPagesJSONBodyTemplateFullWithinLayout PostApiPagesJSONBodyTemplate = "full_within_layout"
	PostApiPagesJSONBodyTemplateJson             PostApiPagesJSONBodyTemplate = "json"
	PostApiPagesJSONBodyTemplateNavBarIncluded   PostApiPagesJSONBodyTemplate = "nav_bar_included"
)

// Defines values for PostApiReactionsParamsCategory.
const (
	PostApiReactionsParamsCategoryExplodingHead PostApiReactionsParamsCategory = "exploding_head"
	PostApiReactionsParamsCategoryFire          PostApiReactionsParamsCategory = "fire"
	PostApiReactionsParamsCategoryLike          PostApiReactionsParamsCategory = "like"
	PostApiReactionsParamsCategoryRaisedHands   PostApiReactionsParamsCategory = "raised_hands"
	PostApiReactionsParamsCategoryUnicorn       PostApiReactionsParamsCategory = "unicorn"
)

// Defines values for PostApiReactionsParamsReactableType.
const (
	PostApiReactionsParamsReactableTypeArticle PostApiReactionsParamsReactableType = "Article"
	PostApiReactionsParamsReactableTypeComment PostApiReactionsParamsReactableType = "Comment"
	PostApiReactionsParamsReactableTypeUser    PostApiReactionsParamsReactableType = "User"
)

// Defines values for PostApiReactionsToggleParamsCategory.
const (
	PostApiReactionsToggleParamsCategoryExplodingHead PostApiReactionsToggleParamsCategory = "exploding_head"
	PostApiReactionsToggleParamsCategoryFire          PostApiReactionsToggleParamsCategory = "fire"
	PostApiReactionsToggleParamsCategoryLike          PostApiReactionsToggleParamsCategory = "like"
	PostApiReactionsToggleParamsCategoryRaisedHands   PostApiReactionsToggleParamsCategory = "raised_hands"
	PostApiReactionsToggleParamsCategoryUnicorn       PostApiReactionsToggleParamsCategory = "unicorn"
)

// Defines values for PostApiReactionsToggleParamsReactableType.
const (
	PostApiReactionsToggleParamsReactableTypeArticle PostApiReactionsToggleParamsReactableType = "Article"
	PostApiReactionsToggleParamsReactableTypeComment PostApiReactionsToggleParamsReactableType = "Comment"
	PostApiReactionsToggleParamsReactableTypeUser    PostApiReactionsToggleParamsReactableType = "User"
)

// Article Representation of an Article to be created/updated
type Article struct {
	Article *struct {
		BodyMarkdown   *string `json:"body_markdown,omitempty"`
		CanonicalUrl   *string `json:"canonical_url"`
		Description    *string `json:"description,omitempty"`
		MainImage      *string `json:"main_image"`
		OrganizationId *int    `json:"organization_id"`
		Published      *bool   `json:"published,omitempty"`
		Series         *string `json:"series"`
		Tags           *string `json:"tags,omitempty"`
		Title          *string `json:"title,omitempty"`
	} `json:"article,omitempty"`
}

// ArticleFlareTag Flare tag of the article
type ArticleFlareTag struct {
	// BgColorHex Background color (hexadecimal)
	BgColorHex *string `json:"bg_color_hex"`
	Name       *string `json:"name,omitempty"`

	// TextColorHex Text color (hexadecimal)
	TextColorHex *string `json:"text_color_hex"`
}

// ArticleIndex Representation of an article or post returned in a list
type ArticleIndex struct {
	CanonicalUrl  string     `json:"canonical_url"`
	CoverImage    *string    `json:"cover_image"`
	CreatedAt     time.Time  `json:"created_at"`
	CrosspostedAt *time.Time `json:"crossposted_at"`
	Description   string     `json:"description"`
	EditedAt      *time.Time `json:"edited_at"`

	// FlareTag Flare tag of the article
	FlareTag      *ArticleFlareTag `json:"flare_tag,omitempty"`
	Id            int32            `json:"id"`
	LastCommentAt time.Time        `json:"last_comment_at"`

	// Organization The organization the resource belongs to
	Organization           *SharedOrganization `json:"organization,omitempty"`
	Path                   string              `json:"path"`
	PositiveReactionsCount int32               `json:"positive_reactions_count"`
	PublicReactionsCount   int32               `json:"public_reactions_count"`
	PublishedAt            time.Time           `json:"published_at"`

	// PublishedTimestamp Crossposting or published date time
	PublishedTimestamp  time.Time `json:"published_timestamp"`
	ReadablePublishDate string    `json:"readable_publish_date"`

	// ReadingTimeMinutes Reading time, in minutes
	ReadingTimeMinutes int32    `json:"reading_time_minutes"`
	Slug               string   `json:"slug"`
	SocialImage        string   `json:"social_image"`
	TagList            []string `json:"tag_list"`
	Tags               string   `json:"tags"`
	Title              string   `json:"title"`
	TypeOf             string   `json:"type_of"`
	Url                string   `json:"url"`

	// User The resource creator
	User SharedUser `json:"user"`
}

// Comment A Comment on an Article or Podcast Episode
type Comment struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	IdCode    *string    `json:"id_code,omitempty"`

	// ImageUrl Podcast image url
	ImageUrl *string `json:"image_url,omitempty"`
	TypeOf   *string `json:"type_of,omitempty"`
}

// DisplayAd A Display Ad, aka Billboard, aka Widget
type DisplayAd struct {
	// Approved Ad must be both published and approved to be in rotation
	Approved *bool `json:"approved,omitempty"`

	// ArticleExcludeIds Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
	ArticleExcludeIds *string `json:"article_exclude_ids"`

	// AudienceSegmentType Specifies an group of users to show this ad to (only works with logged-in users)
	AudienceSegmentType *DisplayAdAudienceSegmentType `json:"audience_segment_type,omitempty"`

	// BodyMarkdown The text (in markdown) of the ad (required)
	BodyMarkdown string `json:"body_markdown"`

	// CreatorId Identifies the user who created the ad.
	CreatorId *int `json:"creator_id"`

	// DisplayTo Potentially limits visitors to whom the ad is visible
	DisplayTo *DisplayAdDisplayTo `json:"display_to,omitempty"`

	// Id The ID of the Display Ad
	Id *int `json:"id,omitempty"`

	// Name For internal use, helps distinguish ads from one another
	Name string `json:"name"`

	// OrganizationId Identifies the organization to which the ad belongs
	OrganizationId *int `json:"organization_id"`

	// PlacementArea Identifies which area of site layout the ad can appear in
	PlacementArea DisplayAdPlacementArea `json:"placement_area"`

	// Published Ad must be both published and approved to be in rotation
	Published *bool `json:"published,omitempty"`

	// TagList Tags on which this ad can be displayed (blank is all/any tags)
	TagList *string `json:"tag_list,omitempty"`

	// TypeOf Types of the billboards:
	// in_house (created by admins),
	// community (created by an entity, appears on entity's content),
	// external ( created by an entity, or a non-entity, can appear everywhere)
	TypeOf *DisplayAdTypeOf `json:"type_of,omitempty"`
}

// DisplayAdAudienceSegmentType Specifies an group of users to show this ad to (only works with logged-in users)
type DisplayAdAudienceSegmentType string

// DisplayAdDisplayTo Potentially limits visitors to whom the ad is visible
type DisplayAdDisplayTo string

// DisplayAdPlacementArea Identifies which area of site layout the ad can appear in
type DisplayAdPlacementArea string

// DisplayAdTypeOf Types of the billboards:
// in_house (created by admins),
// community (created by an entity, appears on entity's content),
// external ( created by an entity, or a non-entity, can appear everywhere)
type DisplayAdTypeOf string

// FollowedTag Representation of a followed tag
type FollowedTag struct {
	// Id Tag id
	Id     int64   `json:"id"`
	Name   string  `json:"name"`
	Points float32 `json:"points"`
}

// Organization Representation of an Organization
type Organization struct {
	GithubUsername  *string `json:"github_username,omitempty"`
	JoinedAt        *string `json:"joined_at,omitempty"`
	Location        *string `json:"location,omitempty"`
	Name            *string `json:"name,omitempty"`
	Story           *string `json:"story"`
	Summary         *string `json:"summary,omitempty"`
	TagLine         *string `json:"tag_line"`
	TechStack       *string `json:"tech_stack,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
	TypeOf          *string `json:"type_of,omitempty"`
	Url             *string `json:"url,omitempty"`
	Username        *string `json:"username,omitempty"`
}

// Page Representation of a page object
type Page struct {
	// BodyJson For JSON pages, the JSON body
	BodyJson *string `json:"body_json"`

	// BodyMarkdown The text (in markdown) of the ad (required)
	BodyMarkdown *string `json:"body_markdown"`

	// Description For internal use, helps similar pages from one another
	Description string `json:"description"`

	// IsTopLevelPath If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution
	IsTopLevelPath *bool `json:"is_top_level_path,omitempty"`

	// Slug Used to link to this page in URLs, must be unique and URL-safe
	Slug        string                  `json:"slug"`
	SocialImage *map[string]interface{} `json:"social_image"`

	// Template Controls what kind of layout the page is rendered in
	Template PageTemplate `json:"template"`

	// Title Title of the page
	Title string `json:"title"`
}

// PageTemplate Controls what kind of layout the page is rendered in
type PageTemplate string

// PodcastEpisodeIndex Representation of a podcast episode returned in a list
type PodcastEpisodeIndex struct {
	ClassName string `json:"class_name"`
	Id        int32  `json:"id"`

	// ImageUrl Podcast episode image url or podcast image url
	ImageUrl string `json:"image_url"`
	Path     string `json:"path"`

	// Podcast The podcast that the resource belongs to
	Podcast SharedPodcast `json:"podcast"`
	Title   string        `json:"title"`
	TypeOf  string        `json:"type_of"`
}

// ProfileImage A profile image object
type ProfileImage struct {
	// ImageOf Determines the type of the profile image owner (user or organization)
	ImageOf *string `json:"image_of,omitempty"`

	// ProfileImage Profile image (640x640)
	ProfileImage *string `json:"profile_image,omitempty"`

	// ProfileImage90 Profile image (90x90)
	ProfileImage90 *string `json:"profile_image_90,omitempty"`

	// TypeOf Return profile_image
	TypeOf *string `json:"type_of,omitempty"`
}

// SharedOrganization The organization the resource belongs to
type SharedOrganization struct {
	Name *string `json:"name,omitempty"`

	// ProfileImage Profile image (640x640)
	ProfileImage *string `json:"profile_image,omitempty"`

	// ProfileImage90 Profile image (90x90)
	ProfileImage90 *string `json:"profile_image_90,omitempty"`
	Slug           *string `json:"slug,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// SharedPodcast The podcast that the resource belongs to
type SharedPodcast struct {
	// ImageUrl Podcast image url
	ImageUrl *string `json:"image_url,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// SharedUser The resource creator
type SharedUser struct {
	GithubUsername *string `json:"github_username"`
	Name           *string `json:"name,omitempty"`

	// ProfileImage Profile image (640x640)
	ProfileImage *string `json:"profile_image,omitempty"`

	// ProfileImage90 Profile image (90x90)
	ProfileImage90  *string `json:"profile_image_90,omitempty"`
	TwitterUsername *string `json:"twitter_username"`
	Username        *string `json:"username,omitempty"`
	WebsiteUrl      *string `json:"website_url"`
}

// Tag Representation of a tag
type Tag struct {
	BgColorHex *string `json:"bg_color_hex"`

	// Id Tag id
	Id           *int64  `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	TextColorHex *string `json:"text_color_hex"`
}

// User The representation of a user
type User struct {
	GithubUsername  *string `json:"github_username,omitempty"`
	Id              *int64  `json:"id,omitempty"`
	JoinedAt        *string `json:"joined_at,omitempty"`
	Location        *string `json:"location"`
	Name            *string `json:"name,omitempty"`
	ProfileImage    *string `json:"profile_image,omitempty"`
	Summary         *string `json:"summary"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
	TypeOf          *string `json:"type_of,omitempty"`
	Username        *string `json:"username,omitempty"`
	WebsiteUrl      *string `json:"website_url"`
}

// UserInviteParam User invite parameters
type UserInviteParam struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name"`
}

// VideoArticle Representation of an Article with video
type VideoArticle struct {
	CloudinaryVideoUrl *string `json:"cloudinary_video_url,omitempty"`
	Id                 *int64  `json:"id,omitempty"`
	Path               *string `json:"path,omitempty"`
	Title              *string `json:"title,omitempty"`
	TypeOf             *string `json:"type_of,omitempty"`

	// User Author of the article
	User *struct {
		Name *string `json:"name,omitempty"`
	} `json:"user,omitempty"`
	UserId                 *int64  `json:"user_id,omitempty"`
	VideoDurationInMinutes *string `json:"video_duration_in_minutes,omitempty"`
	VideoSourceUrl         *string `json:"video_source_url,omitempty"`
}

// PageParam defines model for pageParam.
type PageParam = int32

// PerPageParam10to1000 defines model for perPageParam10to1000.
type PerPageParam10to1000 = int32

// PerPageParam24to1000 defines model for perPageParam24to1000.
type PerPageParam24to1000 = int32

// PerPageParam30to1000 defines model for perPageParam30to1000.
type PerPageParam30to1000 = int32

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Tag Using this parameter will retrieve articles that contain the requested tag. Articles
	// will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Using this parameter will retrieve articles with any of the comma-separated tags.
	// Articles will be ordered by descending popularity.
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// TagsExclude Using this parameter will retrieve articles that do _not_ contain _any_
	// of comma-separated tags. Articles will be ordered by descending popularity.
	TagsExclude *string `form:"tags_exclude,omitempty" json:"tags_exclude,omitempty"`

	// Username Using this parameter will retrieve articles belonging
	//             to a User or Organization ordered by descending publication date.
	//             If `state=all` the number of items returned will be `1000` instead of the default `30`.
	//             This parameter can be used in conjuction with `state`.
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// State Using this parameter will allow the client to check which articles are fresh or rising.
	//             If `state=fresh` the server will return fresh articles.
	//             If `state=rising` the server will return rising articles.
	//             This param can be used in conjuction with `username`, only if set to `all`.
	State *GetArticlesParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Top Using this parameter will allow the client to return the most popular articles
	// in the last `N` days.
	// `top` indicates the number of days since publication of the articles returned.
	// This param can be used in conjuction with `tag`.
	Top *int32 `form:"top,omitempty" json:"top,omitempty"`

	// CollectionId Adding this will allow the client to return the list of articles
	// belonging to the requested collection, ordered by ascending publication date.
	CollectionId *int32 `form:"collection_id,omitempty" json:"collection_id,omitempty"`
}

// GetArticlesParamsState defines parameters for GetArticles.
type GetArticlesParamsState string

// GetLatestArticlesParams defines parameters for GetLatestArticles.
type GetLatestArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetUserArticlesParams defines parameters for GetUserArticles.
type GetUserArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetUserAllArticlesParams defines parameters for GetUserAllArticles.
type GetUserAllArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetUserPublishedArticlesParams defines parameters for GetUserPublishedArticles.
type GetUserPublishedArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetUserUnpublishedArticlesParams defines parameters for GetUserUnpublishedArticles.
type GetUserUnpublishedArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// UnpublishArticleParams defines parameters for UnpublishArticle.
type UnpublishArticleParams struct {
	// Note Content for the note that's created along with unpublishing
	Note *string `form:"note,omitempty" json:"note,omitempty"`
}

// GetCommentsByArticleIdParams defines parameters for GetCommentsByArticleId.
type GetCommentsByArticleIdParams struct {
	// AId Article identifier.
	AId *string `form:"a_id,omitempty" json:"a_id,omitempty"`

	// PId Podcast Episode identifier.
	PId *string `form:"p_id,omitempty" json:"p_id,omitempty"`
}

// PostApiDisplayAdsJSONBody defines parameters for PostApiDisplayAds.
type PostApiDisplayAdsJSONBody = map[string]interface{}

// PutApiDisplayAdsIdJSONBody defines parameters for PutApiDisplayAdsId.
type PutApiDisplayAdsIdJSONBody = map[string]interface{}

// GetFollowersParams defines parameters for GetFollowers.
type GetFollowersParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Sort Default is 'created_at'. Specifies the sort order for the created_at param of the follow
	//                                 relationship. To sort by newest followers first (descending order) specify
	//                                 ?sort=-created_at.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetOrgArticlesParams defines parameters for GetOrgArticles.
type GetOrgArticlesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetOrgUsersParams defines parameters for GetOrgUsers.
type GetOrgUsersParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostApiPagesJSONBody defines parameters for PostApiPages.
type PostApiPagesJSONBody struct {
	// BodyJson For JSON pages, the JSON body
	BodyJson *string `json:"body_json,omitempty"`

	// BodyMarkdown The text (in markdown) of the ad (required)
	BodyMarkdown *string `json:"body_markdown,omitempty"`

	// Description For internal use, helps similar pages from one another
	Description *string `json:"description,omitempty"`

	// IsTopLevelPath If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution
	IsTopLevelPath *bool `json:"is_top_level_path,omitempty"`

	// Slug Used to link to this page in URLs, must be unique and URL-safe
	Slug *string `json:"slug,omitempty"`

	// Template Controls what kind of layout the page is rendered in
	Template *PostApiPagesJSONBodyTemplate `json:"template,omitempty"`

	// Title Title of the page
	Title *string `json:"title,omitempty"`
}

// PostApiPagesJSONBodyTemplate defines parameters for PostApiPages.
type PostApiPagesJSONBodyTemplate string

// GetPodcastEpisodesParams defines parameters for GetPodcastEpisodes.
type GetPodcastEpisodesParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Username Using this parameter will retrieve episodes belonging to a specific podcast.
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// PostApiReactionsParams defines parameters for PostApiReactions.
type PostApiReactionsParams struct {
	Category      PostApiReactionsParamsCategory      `form:"category" json:"category"`
	ReactableId   int32                               `form:"reactable_id" json:"reactable_id"`
	ReactableType PostApiReactionsParamsReactableType `form:"reactable_type" json:"reactable_type"`
}

// PostApiReactionsParamsCategory defines parameters for PostApiReactions.
type PostApiReactionsParamsCategory string

// PostApiReactionsParamsReactableType defines parameters for PostApiReactions.
type PostApiReactionsParamsReactableType string

// PostApiReactionsToggleParams defines parameters for PostApiReactionsToggle.
type PostApiReactionsToggleParams struct {
	Category      PostApiReactionsToggleParamsCategory      `form:"category" json:"category"`
	ReactableId   int32                                     `form:"reactable_id" json:"reactable_id"`
	ReactableType PostApiReactionsToggleParamsReactableType `form:"reactable_type" json:"reactable_type"`
}

// PostApiReactionsToggleParamsCategory defines parameters for PostApiReactionsToggle.
type PostApiReactionsToggleParamsCategory string

// PostApiReactionsToggleParamsReactableType defines parameters for PostApiReactionsToggle.
type PostApiReactionsToggleParamsReactableType string

// GetReadinglistParams defines parameters for GetReadinglist.
type GetReadinglistParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam30to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam10to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// VideosParams defines parameters for Videos.
type VideosParams struct {
	// Page Pagination page
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Page size (the number of items to return per page). The default maximum value can be overridden by "API_PER_PAGE_MAX" environment variable.
	PerPage *PerPageParam24to1000 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostAdminUsersCreateJSONRequestBody defines body for PostAdminUsersCreate for application/json ContentType.
type PostAdminUsersCreateJSONRequestBody = UserInviteParam

// CreateArticleJSONRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody = Article

// UpdateArticleJSONRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody = Article

// PostApiDisplayAdsJSONRequestBody defines body for PostApiDisplayAds for application/json ContentType.
type PostApiDisplayAdsJSONRequestBody = PostApiDisplayAdsJSONBody

// PutApiDisplayAdsIdJSONRequestBody defines body for PutApiDisplayAdsId for application/json ContentType.
type PutApiDisplayAdsIdJSONRequestBody = PutApiDisplayAdsIdJSONBody

// PostApiPagesJSONRequestBody defines body for PostApiPages for application/json ContentType.
type PostApiPagesJSONRequestBody PostApiPagesJSONBody

// PutApiPagesIdJSONRequestBody defines body for PutApiPagesId for application/json ContentType.
type PutApiPagesIdJSONRequestBody = Page

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAdminUsersCreateWithBody request with any body
	PostAdminUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminUsersCreate(ctx context.Context, body PostAdminUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticles request
	GetArticles(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArticleWithBody request with any body
	CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestArticles request
	GetLatestArticles(ctx context.Context, params *GetLatestArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserArticles request
	GetUserArticles(ctx context.Context, params *GetUserArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAllArticles request
	GetUserAllArticles(ctx context.Context, params *GetUserAllArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPublishedArticles request
	GetUserPublishedArticles(ctx context.Context, params *GetUserPublishedArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUnpublishedArticles request
	GetUserUnpublishedArticles(ctx context.Context, params *GetUserUnpublishedArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticleById request
	GetArticleById(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArticleWithBody request with any body
	UpdateArticleWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArticle(ctx context.Context, id int32, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnpublishArticle request
	UnpublishArticle(ctx context.Context, id int32, params *UnpublishArticleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArticleByPath request
	GetArticleByPath(ctx context.Context, username string, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentsByArticleId request
	GetCommentsByArticleId(ctx context.Context, params *GetCommentsByArticleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentById request
	GetCommentById(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDisplayAds request
	GetApiDisplayAds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDisplayAdsWithBody request with any body
	PostApiDisplayAdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDisplayAds(ctx context.Context, body PostApiDisplayAdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDisplayAdsId request
	GetApiDisplayAdsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDisplayAdsIdWithBody request with any body
	PutApiDisplayAdsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDisplayAdsId(ctx context.Context, id int32, body PutApiDisplayAdsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDisplayAdsIdUnpublish request
	PutApiDisplayAdsIdUnpublish(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFollowers request
	GetFollowers(ctx context.Context, params *GetFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFollowedTags request
	GetFollowedTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgArticles request
	GetOrgArticles(ctx context.Context, username string, params *GetOrgArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgUsers request
	GetOrgUsers(ctx context.Context, username string, params *GetOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPages request
	GetApiPages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPagesWithBody request with any body
	PostApiPagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPages(ctx context.Context, body PostApiPagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPagesId request
	DeleteApiPagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPagesId request
	GetApiPagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPagesIdWithBody request with any body
	PutApiPagesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPagesId(ctx context.Context, id int32, body PutApiPagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPodcastEpisodes request
	GetPodcastEpisodes(ctx context.Context, params *GetPodcastEpisodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileImage request
	GetProfileImage(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiReactions request
	PostApiReactions(ctx context.Context, params *PostApiReactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiReactionsToggle request
	PostApiReactionsToggle(ctx context.Context, params *PostApiReactionsToggleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReadinglist request
	GetReadinglist(ctx context.Context, params *GetReadinglistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMe request
	GetUserMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendUser request
	SuspendUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnpublishUser request
	UnpublishUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Videos request
	Videos(ctx context.Context, params *VideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAdminUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminUsersCreate(ctx context.Context, body PostAdminUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticles(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArticle(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArticleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestArticles(ctx context.Context, params *GetLatestArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserArticles(ctx context.Context, params *GetUserArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAllArticles(ctx context.Context, params *GetUserAllArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAllArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPublishedArticles(ctx context.Context, params *GetUserPublishedArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPublishedArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUnpublishedArticles(ctx context.Context, params *GetUserUnpublishedArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUnpublishedArticlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticleById(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticleByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticleWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArticleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArticle(ctx context.Context, id int32, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArticleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishArticle(ctx context.Context, id int32, params *UnpublishArticleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishArticleRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArticleByPath(ctx context.Context, username string, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArticleByPathRequest(c.Server, username, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentsByArticleId(ctx context.Context, params *GetCommentsByArticleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentsByArticleIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentById(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDisplayAds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDisplayAdsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDisplayAdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDisplayAdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDisplayAds(ctx context.Context, body PostApiDisplayAdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDisplayAdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDisplayAdsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDisplayAdsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDisplayAdsIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDisplayAdsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDisplayAdsId(ctx context.Context, id int32, body PutApiDisplayAdsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDisplayAdsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDisplayAdsIdUnpublish(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDisplayAdsIdUnpublishRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFollowers(ctx context.Context, params *GetFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFollowersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFollowedTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFollowedTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgArticles(ctx context.Context, username string, params *GetOrgArticlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgArticlesRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgUsers(ctx context.Context, username string, params *GetOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgUsersRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPages(ctx context.Context, body PostApiPagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPagesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPagesIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPagesId(ctx context.Context, id int32, body PutApiPagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPodcastEpisodes(ctx context.Context, params *GetPodcastEpisodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPodcastEpisodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileImage(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileImageRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiReactions(ctx context.Context, params *PostApiReactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiReactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiReactionsToggle(ctx context.Context, params *PostApiReactionsToggleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiReactionsToggleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReadinglist(ctx context.Context, params *GetReadinglistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReadinglistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Videos(ctx context.Context, params *VideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVideosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAdminUsersCreateRequest calls the generic PostAdminUsersCreate builder with application/json body
func NewPostAdminUsersCreateRequest(server string, body PostAdminUsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminUsersCreateRequestWithBody generates requests for PostAdminUsersCreate with any type of body
func NewPostAdminUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArticlesRequest generates requests for GetArticles
func NewGetArticlesRequest(server string, params *GetArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagsExclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags_exclude", runtime.ParamLocationQuery, *params.TagsExclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CollectionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collection_id", runtime.ParamLocationQuery, *params.CollectionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArticleRequest calls the generic CreateArticle builder with application/json body
func NewCreateArticleRequest(server string, body CreateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArticleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateArticleRequestWithBody generates requests for CreateArticle with any type of body
func NewCreateArticleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLatestArticlesRequest generates requests for GetLatestArticles
func NewGetLatestArticlesRequest(server string, params *GetLatestArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserArticlesRequest generates requests for GetUserArticles
func NewGetUserArticlesRequest(server string, params *GetUserArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAllArticlesRequest generates requests for GetUserAllArticles
func NewGetUserAllArticlesRequest(server string, params *GetUserAllArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/me/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPublishedArticlesRequest generates requests for GetUserPublishedArticles
func NewGetUserPublishedArticlesRequest(server string, params *GetUserPublishedArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/me/published")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUnpublishedArticlesRequest generates requests for GetUserUnpublishedArticles
func NewGetUserUnpublishedArticlesRequest(server string, params *GetUserUnpublishedArticlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/me/unpublished")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticleByIdRequest generates requests for GetArticleById
func NewGetArticleByIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArticleRequest calls the generic UpdateArticle builder with application/json body
func NewUpdateArticleRequest(server string, id int32, body UpdateArticleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArticleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateArticleRequestWithBody generates requests for UpdateArticle with any type of body
func NewUpdateArticleRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnpublishArticleRequest generates requests for UnpublishArticle
func NewUnpublishArticleRequest(server string, id int32, params *UnpublishArticleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Note != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "note", runtime.ParamLocationQuery, *params.Note); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArticleByPathRequest generates requests for GetArticleByPath
func NewGetArticleByPathRequest(server string, username string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/articles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentsByArticleIdRequest generates requests for GetCommentsByArticleId
func NewGetCommentsByArticleIdRequest(server string, params *GetCommentsByArticleIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "a_id", runtime.ParamLocationQuery, *params.AId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p_id", runtime.ParamLocationQuery, *params.PId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentByIdRequest generates requests for GetCommentById
func NewGetCommentByIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/comments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDisplayAdsRequest generates requests for GetApiDisplayAds
func NewGetApiDisplayAdsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/display_ads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDisplayAdsRequest calls the generic PostApiDisplayAds builder with application/json body
func NewPostApiDisplayAdsRequest(server string, body PostApiDisplayAdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDisplayAdsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDisplayAdsRequestWithBody generates requests for PostApiDisplayAds with any type of body
func NewPostApiDisplayAdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/display_ads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDisplayAdsIdRequest generates requests for GetApiDisplayAdsId
func NewGetApiDisplayAdsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/display_ads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDisplayAdsIdRequest calls the generic PutApiDisplayAdsId builder with application/json body
func NewPutApiDisplayAdsIdRequest(server string, id int32, body PutApiDisplayAdsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDisplayAdsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiDisplayAdsIdRequestWithBody generates requests for PutApiDisplayAdsId with any type of body
func NewPutApiDisplayAdsIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/display_ads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiDisplayAdsIdUnpublishRequest generates requests for PutApiDisplayAdsIdUnpublish
func NewPutApiDisplayAdsIdUnpublishRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/display_ads/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFollowersRequest generates requests for GetFollowers
func NewGetFollowersRequest(server string, params *GetFollowersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/followers/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFollowedTagsRequest generates requests for GetFollowedTags
func NewGetFollowedTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/follows/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgArticlesRequest generates requests for GetOrgArticles
func NewGetOrgArticlesRequest(server string, username string, params *GetOrgArticlesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/articles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgUsersRequest generates requests for GetOrgUsers
func NewGetOrgUsersRequest(server string, username string, params *GetOrgUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPagesRequest generates requests for GetApiPages
func NewGetApiPagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPagesRequest calls the generic PostApiPages builder with application/json body
func NewPostApiPagesRequest(server string, body PostApiPagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPagesRequestWithBody generates requests for PostApiPages with any type of body
func NewPostApiPagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPagesIdRequest generates requests for DeleteApiPagesId
func NewDeleteApiPagesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPagesIdRequest generates requests for GetApiPagesId
func NewGetApiPagesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPagesIdRequest calls the generic PutApiPagesId builder with application/json body
func NewPutApiPagesIdRequest(server string, id int32, body PutApiPagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiPagesIdRequestWithBody generates requests for PutApiPagesId with any type of body
func NewPutApiPagesIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPodcastEpisodesRequest generates requests for GetPodcastEpisodes
func NewGetPodcastEpisodesRequest(server string, params *GetPodcastEpisodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/podcast_episodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileImageRequest generates requests for GetProfileImage
func NewGetProfileImageRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile_images/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiReactionsRequest generates requests for PostApiReactions
func NewPostApiReactionsRequest(server string, params *PostApiReactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reactable_id", runtime.ParamLocationQuery, params.ReactableId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reactable_type", runtime.ParamLocationQuery, params.ReactableType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiReactionsToggleRequest generates requests for PostApiReactionsToggle
func NewPostApiReactionsToggleRequest(server string, params *PostApiReactionsToggleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/reactions/toggle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reactable_id", runtime.ParamLocationQuery, params.ReactableId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reactable_type", runtime.ParamLocationQuery, params.ReactableType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReadinglistRequest generates requests for GetReadinglist
func NewGetReadinglistRequest(server string, params *GetReadinglistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/readinglist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMeRequest generates requests for GetUserMe
func NewGetUserMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuspendUserRequest generates requests for SuspendUser
func NewSuspendUserRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/suspend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnpublishUserRequest generates requests for UnpublishUser
func NewUnpublishUserRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVideosRequest generates requests for Videos
func NewVideosRequest(server string, params *VideosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAdminUsersCreateWithBodyWithResponse request with any body
	PostAdminUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminUsersCreateResponse, error)

	PostAdminUsersCreateWithResponse(ctx context.Context, body PostAdminUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminUsersCreateResponse, error)

	// GetArticlesWithResponse request
	GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*GetArticlesResponse, error)

	// CreateArticleWithBodyWithResponse request with any body
	CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error)

	CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error)

	// GetLatestArticlesWithResponse request
	GetLatestArticlesWithResponse(ctx context.Context, params *GetLatestArticlesParams, reqEditors ...RequestEditorFn) (*GetLatestArticlesResponse, error)

	// GetUserArticlesWithResponse request
	GetUserArticlesWithResponse(ctx context.Context, params *GetUserArticlesParams, reqEditors ...RequestEditorFn) (*GetUserArticlesResponse, error)

	// GetUserAllArticlesWithResponse request
	GetUserAllArticlesWithResponse(ctx context.Context, params *GetUserAllArticlesParams, reqEditors ...RequestEditorFn) (*GetUserAllArticlesResponse, error)

	// GetUserPublishedArticlesWithResponse request
	GetUserPublishedArticlesWithResponse(ctx context.Context, params *GetUserPublishedArticlesParams, reqEditors ...RequestEditorFn) (*GetUserPublishedArticlesResponse, error)

	// GetUserUnpublishedArticlesWithResponse request
	GetUserUnpublishedArticlesWithResponse(ctx context.Context, params *GetUserUnpublishedArticlesParams, reqEditors ...RequestEditorFn) (*GetUserUnpublishedArticlesResponse, error)

	// GetArticleByIdWithResponse request
	GetArticleByIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetArticleByIdResponse, error)

	// UpdateArticleWithBodyWithResponse request with any body
	UpdateArticleWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error)

	UpdateArticleWithResponse(ctx context.Context, id int32, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error)

	// UnpublishArticleWithResponse request
	UnpublishArticleWithResponse(ctx context.Context, id int32, params *UnpublishArticleParams, reqEditors ...RequestEditorFn) (*UnpublishArticleResponse, error)

	// GetArticleByPathWithResponse request
	GetArticleByPathWithResponse(ctx context.Context, username string, slug string, reqEditors ...RequestEditorFn) (*GetArticleByPathResponse, error)

	// GetCommentsByArticleIdWithResponse request
	GetCommentsByArticleIdWithResponse(ctx context.Context, params *GetCommentsByArticleIdParams, reqEditors ...RequestEditorFn) (*GetCommentsByArticleIdResponse, error)

	// GetCommentByIdWithResponse request
	GetCommentByIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCommentByIdResponse, error)

	// GetApiDisplayAdsWithResponse request
	GetApiDisplayAdsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDisplayAdsResponse, error)

	// PostApiDisplayAdsWithBodyWithResponse request with any body
	PostApiDisplayAdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDisplayAdsResponse, error)

	PostApiDisplayAdsWithResponse(ctx context.Context, body PostApiDisplayAdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDisplayAdsResponse, error)

	// GetApiDisplayAdsIdWithResponse request
	GetApiDisplayAdsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiDisplayAdsIdResponse, error)

	// PutApiDisplayAdsIdWithBodyWithResponse request with any body
	PutApiDisplayAdsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdResponse, error)

	PutApiDisplayAdsIdWithResponse(ctx context.Context, id int32, body PutApiDisplayAdsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdResponse, error)

	// PutApiDisplayAdsIdUnpublishWithResponse request
	PutApiDisplayAdsIdUnpublishWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdUnpublishResponse, error)

	// GetFollowersWithResponse request
	GetFollowersWithResponse(ctx context.Context, params *GetFollowersParams, reqEditors ...RequestEditorFn) (*GetFollowersResponse, error)

	// GetFollowedTagsWithResponse request
	GetFollowedTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFollowedTagsResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// GetOrgArticlesWithResponse request
	GetOrgArticlesWithResponse(ctx context.Context, username string, params *GetOrgArticlesParams, reqEditors ...RequestEditorFn) (*GetOrgArticlesResponse, error)

	// GetOrgUsersWithResponse request
	GetOrgUsersWithResponse(ctx context.Context, username string, params *GetOrgUsersParams, reqEditors ...RequestEditorFn) (*GetOrgUsersResponse, error)

	// GetApiPagesWithResponse request
	GetApiPagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPagesResponse, error)

	// PostApiPagesWithBodyWithResponse request with any body
	PostApiPagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPagesResponse, error)

	PostApiPagesWithResponse(ctx context.Context, body PostApiPagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPagesResponse, error)

	// DeleteApiPagesIdWithResponse request
	DeleteApiPagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiPagesIdResponse, error)

	// GetApiPagesIdWithResponse request
	GetApiPagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiPagesIdResponse, error)

	// PutApiPagesIdWithBodyWithResponse request with any body
	PutApiPagesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPagesIdResponse, error)

	PutApiPagesIdWithResponse(ctx context.Context, id int32, body PutApiPagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPagesIdResponse, error)

	// GetPodcastEpisodesWithResponse request
	GetPodcastEpisodesWithResponse(ctx context.Context, params *GetPodcastEpisodesParams, reqEditors ...RequestEditorFn) (*GetPodcastEpisodesResponse, error)

	// GetProfileImageWithResponse request
	GetProfileImageWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error)

	// PostApiReactionsWithResponse request
	PostApiReactionsWithResponse(ctx context.Context, params *PostApiReactionsParams, reqEditors ...RequestEditorFn) (*PostApiReactionsResponse, error)

	// PostApiReactionsToggleWithResponse request
	PostApiReactionsToggleWithResponse(ctx context.Context, params *PostApiReactionsToggleParams, reqEditors ...RequestEditorFn) (*PostApiReactionsToggleResponse, error)

	// GetReadinglistWithResponse request
	GetReadinglistWithResponse(ctx context.Context, params *GetReadinglistParams, reqEditors ...RequestEditorFn) (*GetReadinglistResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// GetUserMeWithResponse request
	GetUserMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// SuspendUserWithResponse request
	SuspendUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*SuspendUserResponse, error)

	// UnpublishUserWithResponse request
	UnpublishUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UnpublishUserResponse, error)

	// VideosWithResponse request
	VideosWithResponse(ctx context.Context, params *VideosParams, reqEditors ...RequestEditorFn) (*VideosResponse, error)
}

type PostAdminUsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminUsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminUsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetLatestArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetUserArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAllArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetUserAllArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAllArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPublishedArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetUserPublishedArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPublishedArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUnpublishedArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetUserUnpublishedArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUnpublishedArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetArticleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishArticleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnpublishArticleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishArticleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArticleByPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetArticleByPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArticleByPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentsByArticleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Comment
}

// Status returns HTTPResponse.Status
func (r GetCommentsByArticleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentsByArticleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCommentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDisplayAdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DisplayAd
}

// Status returns HTTPResponse.Status
func (r GetApiDisplayAdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDisplayAdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDisplayAdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostApiDisplayAdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDisplayAdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDisplayAdsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiDisplayAdsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDisplayAdsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDisplayAdsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutApiDisplayAdsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDisplayAdsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDisplayAdsIdUnpublishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiDisplayAdsIdUnpublishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDisplayAdsIdUnpublishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id *int32 `json:"id,omitempty"`

		// Name The follower's name
		Name *string `json:"name,omitempty"`

		// Path A path to the follower's profile
		Path *string `json:"path,omitempty"`

		// ProfileImage Profile image (640x640)
		ProfileImage *string `json:"profile_image,omitempty"`

		// TypeOf user_follower by default
		TypeOf *string `json:"type_of,omitempty"`

		// UserId The follower's user id
		UserId *int32 `json:"user_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFollowedTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FollowedTag
}

// Status returns HTTPResponse.Status
func (r GetFollowedTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFollowedTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgArticlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetOrgArticlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgArticlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetOrgUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r GetApiPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r DeleteApiPagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r GetApiPagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r PutApiPagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPodcastEpisodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PodcastEpisodeIndex
}

// Status returns HTTPResponse.Status
func (r GetPodcastEpisodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPodcastEpisodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiReactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiReactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiReactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiReactionsToggleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiReactionsToggleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiReactionsToggleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReadinglistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArticleIndex
}

// Status returns HTTPResponse.Status
func (r GetReadinglistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReadinglistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tag
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SuspendUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnpublishUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VideoArticle
}

// Status returns HTTPResponse.Status
func (r VideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAdminUsersCreateWithBodyWithResponse request with arbitrary body returning *PostAdminUsersCreateResponse
func (c *ClientWithResponses) PostAdminUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminUsersCreateResponse, error) {
	rsp, err := c.PostAdminUsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) PostAdminUsersCreateWithResponse(ctx context.Context, body PostAdminUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminUsersCreateResponse, error) {
	rsp, err := c.PostAdminUsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminUsersCreateResponse(rsp)
}

// GetArticlesWithResponse request returning *GetArticlesResponse
func (c *ClientWithResponses) GetArticlesWithResponse(ctx context.Context, params *GetArticlesParams, reqEditors ...RequestEditorFn) (*GetArticlesResponse, error) {
	rsp, err := c.GetArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticlesResponse(rsp)
}

// CreateArticleWithBodyWithResponse request with arbitrary body returning *CreateArticleResponse
func (c *ClientWithResponses) CreateArticleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

func (c *ClientWithResponses) CreateArticleWithResponse(ctx context.Context, body CreateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateArticleResponse, error) {
	rsp, err := c.CreateArticle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateArticleResponse(rsp)
}

// GetLatestArticlesWithResponse request returning *GetLatestArticlesResponse
func (c *ClientWithResponses) GetLatestArticlesWithResponse(ctx context.Context, params *GetLatestArticlesParams, reqEditors ...RequestEditorFn) (*GetLatestArticlesResponse, error) {
	rsp, err := c.GetLatestArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestArticlesResponse(rsp)
}

// GetUserArticlesWithResponse request returning *GetUserArticlesResponse
func (c *ClientWithResponses) GetUserArticlesWithResponse(ctx context.Context, params *GetUserArticlesParams, reqEditors ...RequestEditorFn) (*GetUserArticlesResponse, error) {
	rsp, err := c.GetUserArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserArticlesResponse(rsp)
}

// GetUserAllArticlesWithResponse request returning *GetUserAllArticlesResponse
func (c *ClientWithResponses) GetUserAllArticlesWithResponse(ctx context.Context, params *GetUserAllArticlesParams, reqEditors ...RequestEditorFn) (*GetUserAllArticlesResponse, error) {
	rsp, err := c.GetUserAllArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAllArticlesResponse(rsp)
}

// GetUserPublishedArticlesWithResponse request returning *GetUserPublishedArticlesResponse
func (c *ClientWithResponses) GetUserPublishedArticlesWithResponse(ctx context.Context, params *GetUserPublishedArticlesParams, reqEditors ...RequestEditorFn) (*GetUserPublishedArticlesResponse, error) {
	rsp, err := c.GetUserPublishedArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPublishedArticlesResponse(rsp)
}

// GetUserUnpublishedArticlesWithResponse request returning *GetUserUnpublishedArticlesResponse
func (c *ClientWithResponses) GetUserUnpublishedArticlesWithResponse(ctx context.Context, params *GetUserUnpublishedArticlesParams, reqEditors ...RequestEditorFn) (*GetUserUnpublishedArticlesResponse, error) {
	rsp, err := c.GetUserUnpublishedArticles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUnpublishedArticlesResponse(rsp)
}

// GetArticleByIdWithResponse request returning *GetArticleByIdResponse
func (c *ClientWithResponses) GetArticleByIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetArticleByIdResponse, error) {
	rsp, err := c.GetArticleById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticleByIdResponse(rsp)
}

// UpdateArticleWithBodyWithResponse request with arbitrary body returning *UpdateArticleResponse
func (c *ClientWithResponses) UpdateArticleWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

func (c *ClientWithResponses) UpdateArticleWithResponse(ctx context.Context, id int32, body UpdateArticleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArticleResponse, error) {
	rsp, err := c.UpdateArticle(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArticleResponse(rsp)
}

// UnpublishArticleWithResponse request returning *UnpublishArticleResponse
func (c *ClientWithResponses) UnpublishArticleWithResponse(ctx context.Context, id int32, params *UnpublishArticleParams, reqEditors ...RequestEditorFn) (*UnpublishArticleResponse, error) {
	rsp, err := c.UnpublishArticle(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishArticleResponse(rsp)
}

// GetArticleByPathWithResponse request returning *GetArticleByPathResponse
func (c *ClientWithResponses) GetArticleByPathWithResponse(ctx context.Context, username string, slug string, reqEditors ...RequestEditorFn) (*GetArticleByPathResponse, error) {
	rsp, err := c.GetArticleByPath(ctx, username, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArticleByPathResponse(rsp)
}

// GetCommentsByArticleIdWithResponse request returning *GetCommentsByArticleIdResponse
func (c *ClientWithResponses) GetCommentsByArticleIdWithResponse(ctx context.Context, params *GetCommentsByArticleIdParams, reqEditors ...RequestEditorFn) (*GetCommentsByArticleIdResponse, error) {
	rsp, err := c.GetCommentsByArticleId(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentsByArticleIdResponse(rsp)
}

// GetCommentByIdWithResponse request returning *GetCommentByIdResponse
func (c *ClientWithResponses) GetCommentByIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCommentByIdResponse, error) {
	rsp, err := c.GetCommentById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentByIdResponse(rsp)
}

// GetApiDisplayAdsWithResponse request returning *GetApiDisplayAdsResponse
func (c *ClientWithResponses) GetApiDisplayAdsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDisplayAdsResponse, error) {
	rsp, err := c.GetApiDisplayAds(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDisplayAdsResponse(rsp)
}

// PostApiDisplayAdsWithBodyWithResponse request with arbitrary body returning *PostApiDisplayAdsResponse
func (c *ClientWithResponses) PostApiDisplayAdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDisplayAdsResponse, error) {
	rsp, err := c.PostApiDisplayAdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDisplayAdsResponse(rsp)
}

func (c *ClientWithResponses) PostApiDisplayAdsWithResponse(ctx context.Context, body PostApiDisplayAdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDisplayAdsResponse, error) {
	rsp, err := c.PostApiDisplayAds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDisplayAdsResponse(rsp)
}

// GetApiDisplayAdsIdWithResponse request returning *GetApiDisplayAdsIdResponse
func (c *ClientWithResponses) GetApiDisplayAdsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiDisplayAdsIdResponse, error) {
	rsp, err := c.GetApiDisplayAdsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDisplayAdsIdResponse(rsp)
}

// PutApiDisplayAdsIdWithBodyWithResponse request with arbitrary body returning *PutApiDisplayAdsIdResponse
func (c *ClientWithResponses) PutApiDisplayAdsIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdResponse, error) {
	rsp, err := c.PutApiDisplayAdsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDisplayAdsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDisplayAdsIdWithResponse(ctx context.Context, id int32, body PutApiDisplayAdsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdResponse, error) {
	rsp, err := c.PutApiDisplayAdsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDisplayAdsIdResponse(rsp)
}

// PutApiDisplayAdsIdUnpublishWithResponse request returning *PutApiDisplayAdsIdUnpublishResponse
func (c *ClientWithResponses) PutApiDisplayAdsIdUnpublishWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PutApiDisplayAdsIdUnpublishResponse, error) {
	rsp, err := c.PutApiDisplayAdsIdUnpublish(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDisplayAdsIdUnpublishResponse(rsp)
}

// GetFollowersWithResponse request returning *GetFollowersResponse
func (c *ClientWithResponses) GetFollowersWithResponse(ctx context.Context, params *GetFollowersParams, reqEditors ...RequestEditorFn) (*GetFollowersResponse, error) {
	rsp, err := c.GetFollowers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFollowersResponse(rsp)
}

// GetFollowedTagsWithResponse request returning *GetFollowedTagsResponse
func (c *ClientWithResponses) GetFollowedTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFollowedTagsResponse, error) {
	rsp, err := c.GetFollowedTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFollowedTagsResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// GetOrgArticlesWithResponse request returning *GetOrgArticlesResponse
func (c *ClientWithResponses) GetOrgArticlesWithResponse(ctx context.Context, username string, params *GetOrgArticlesParams, reqEditors ...RequestEditorFn) (*GetOrgArticlesResponse, error) {
	rsp, err := c.GetOrgArticles(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgArticlesResponse(rsp)
}

// GetOrgUsersWithResponse request returning *GetOrgUsersResponse
func (c *ClientWithResponses) GetOrgUsersWithResponse(ctx context.Context, username string, params *GetOrgUsersParams, reqEditors ...RequestEditorFn) (*GetOrgUsersResponse, error) {
	rsp, err := c.GetOrgUsers(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgUsersResponse(rsp)
}

// GetApiPagesWithResponse request returning *GetApiPagesResponse
func (c *ClientWithResponses) GetApiPagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPagesResponse, error) {
	rsp, err := c.GetApiPages(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPagesResponse(rsp)
}

// PostApiPagesWithBodyWithResponse request with arbitrary body returning *PostApiPagesResponse
func (c *ClientWithResponses) PostApiPagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPagesResponse, error) {
	rsp, err := c.PostApiPagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPagesResponse(rsp)
}

func (c *ClientWithResponses) PostApiPagesWithResponse(ctx context.Context, body PostApiPagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPagesResponse, error) {
	rsp, err := c.PostApiPages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPagesResponse(rsp)
}

// DeleteApiPagesIdWithResponse request returning *DeleteApiPagesIdResponse
func (c *ClientWithResponses) DeleteApiPagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiPagesIdResponse, error) {
	rsp, err := c.DeleteApiPagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPagesIdResponse(rsp)
}

// GetApiPagesIdWithResponse request returning *GetApiPagesIdResponse
func (c *ClientWithResponses) GetApiPagesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiPagesIdResponse, error) {
	rsp, err := c.GetApiPagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPagesIdResponse(rsp)
}

// PutApiPagesIdWithBodyWithResponse request with arbitrary body returning *PutApiPagesIdResponse
func (c *ClientWithResponses) PutApiPagesIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPagesIdResponse, error) {
	rsp, err := c.PutApiPagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPagesIdWithResponse(ctx context.Context, id int32, body PutApiPagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPagesIdResponse, error) {
	rsp, err := c.PutApiPagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPagesIdResponse(rsp)
}

// GetPodcastEpisodesWithResponse request returning *GetPodcastEpisodesResponse
func (c *ClientWithResponses) GetPodcastEpisodesWithResponse(ctx context.Context, params *GetPodcastEpisodesParams, reqEditors ...RequestEditorFn) (*GetPodcastEpisodesResponse, error) {
	rsp, err := c.GetPodcastEpisodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPodcastEpisodesResponse(rsp)
}

// GetProfileImageWithResponse request returning *GetProfileImageResponse
func (c *ClientWithResponses) GetProfileImageWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error) {
	rsp, err := c.GetProfileImage(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileImageResponse(rsp)
}

// PostApiReactionsWithResponse request returning *PostApiReactionsResponse
func (c *ClientWithResponses) PostApiReactionsWithResponse(ctx context.Context, params *PostApiReactionsParams, reqEditors ...RequestEditorFn) (*PostApiReactionsResponse, error) {
	rsp, err := c.PostApiReactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiReactionsResponse(rsp)
}

// PostApiReactionsToggleWithResponse request returning *PostApiReactionsToggleResponse
func (c *ClientWithResponses) PostApiReactionsToggleWithResponse(ctx context.Context, params *PostApiReactionsToggleParams, reqEditors ...RequestEditorFn) (*PostApiReactionsToggleResponse, error) {
	rsp, err := c.PostApiReactionsToggle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiReactionsToggleResponse(rsp)
}

// GetReadinglistWithResponse request returning *GetReadinglistResponse
func (c *ClientWithResponses) GetReadinglistWithResponse(ctx context.Context, params *GetReadinglistParams, reqEditors ...RequestEditorFn) (*GetReadinglistResponse, error) {
	rsp, err := c.GetReadinglist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReadinglistResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// GetUserMeWithResponse request returning *GetUserMeResponse
func (c *ClientWithResponses) GetUserMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeResponse, error) {
	rsp, err := c.GetUserMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMeResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// SuspendUserWithResponse request returning *SuspendUserResponse
func (c *ClientWithResponses) SuspendUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*SuspendUserResponse, error) {
	rsp, err := c.SuspendUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendUserResponse(rsp)
}

// UnpublishUserWithResponse request returning *UnpublishUserResponse
func (c *ClientWithResponses) UnpublishUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UnpublishUserResponse, error) {
	rsp, err := c.UnpublishUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishUserResponse(rsp)
}

// VideosWithResponse request returning *VideosResponse
func (c *ClientWithResponses) VideosWithResponse(ctx context.Context, params *VideosParams, reqEditors ...RequestEditorFn) (*VideosResponse, error) {
	rsp, err := c.Videos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVideosResponse(rsp)
}

// ParsePostAdminUsersCreateResponse parses an HTTP response from a PostAdminUsersCreateWithResponse call
func ParsePostAdminUsersCreateResponse(rsp *http.Response) (*PostAdminUsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminUsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetArticlesResponse parses an HTTP response from a GetArticlesWithResponse call
func ParseGetArticlesResponse(rsp *http.Response) (*GetArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateArticleResponse parses an HTTP response from a CreateArticleWithResponse call
func ParseCreateArticleResponse(rsp *http.Response) (*CreateArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLatestArticlesResponse parses an HTTP response from a GetLatestArticlesWithResponse call
func ParseGetLatestArticlesResponse(rsp *http.Response) (*GetLatestArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserArticlesResponse parses an HTTP response from a GetUserArticlesWithResponse call
func ParseGetUserArticlesResponse(rsp *http.Response) (*GetUserArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserAllArticlesResponse parses an HTTP response from a GetUserAllArticlesWithResponse call
func ParseGetUserAllArticlesResponse(rsp *http.Response) (*GetUserAllArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAllArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserPublishedArticlesResponse parses an HTTP response from a GetUserPublishedArticlesWithResponse call
func ParseGetUserPublishedArticlesResponse(rsp *http.Response) (*GetUserPublishedArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPublishedArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserUnpublishedArticlesResponse parses an HTTP response from a GetUserUnpublishedArticlesWithResponse call
func ParseGetUserUnpublishedArticlesResponse(rsp *http.Response) (*GetUserUnpublishedArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUnpublishedArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetArticleByIdResponse parses an HTTP response from a GetArticleByIdWithResponse call
func ParseGetArticleByIdResponse(rsp *http.Response) (*GetArticleByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateArticleResponse parses an HTTP response from a UpdateArticleWithResponse call
func ParseUpdateArticleResponse(rsp *http.Response) (*UpdateArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishArticleResponse parses an HTTP response from a UnpublishArticleWithResponse call
func ParseUnpublishArticleResponse(rsp *http.Response) (*UnpublishArticleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnpublishArticleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetArticleByPathResponse parses an HTTP response from a GetArticleByPathWithResponse call
func ParseGetArticleByPathResponse(rsp *http.Response) (*GetArticleByPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArticleByPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommentsByArticleIdResponse parses an HTTP response from a GetCommentsByArticleIdWithResponse call
func ParseGetCommentsByArticleIdResponse(rsp *http.Response) (*GetCommentsByArticleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentsByArticleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommentByIdResponse parses an HTTP response from a GetCommentByIdWithResponse call
func ParseGetCommentByIdResponse(rsp *http.Response) (*GetCommentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiDisplayAdsResponse parses an HTTP response from a GetApiDisplayAdsWithResponse call
func ParseGetApiDisplayAdsResponse(rsp *http.Response) (*GetApiDisplayAdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDisplayAdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DisplayAd
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiDisplayAdsResponse parses an HTTP response from a PostApiDisplayAdsWithResponse call
func ParsePostApiDisplayAdsResponse(rsp *http.Response) (*PostApiDisplayAdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDisplayAdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiDisplayAdsIdResponse parses an HTTP response from a GetApiDisplayAdsIdWithResponse call
func ParseGetApiDisplayAdsIdResponse(rsp *http.Response) (*GetApiDisplayAdsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDisplayAdsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiDisplayAdsIdResponse parses an HTTP response from a PutApiDisplayAdsIdWithResponse call
func ParsePutApiDisplayAdsIdResponse(rsp *http.Response) (*PutApiDisplayAdsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDisplayAdsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiDisplayAdsIdUnpublishResponse parses an HTTP response from a PutApiDisplayAdsIdUnpublishWithResponse call
func ParsePutApiDisplayAdsIdUnpublishResponse(rsp *http.Response) (*PutApiDisplayAdsIdUnpublishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDisplayAdsIdUnpublishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFollowersResponse parses an HTTP response from a GetFollowersWithResponse call
func ParseGetFollowersResponse(rsp *http.Response) (*GetFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id *int32 `json:"id,omitempty"`

			// Name The follower's name
			Name *string `json:"name,omitempty"`

			// Path A path to the follower's profile
			Path *string `json:"path,omitempty"`

			// ProfileImage Profile image (640x640)
			ProfileImage *string `json:"profile_image,omitempty"`

			// TypeOf user_follower by default
			TypeOf *string `json:"type_of,omitempty"`

			// UserId The follower's user id
			UserId *int32 `json:"user_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFollowedTagsResponse parses an HTTP response from a GetFollowedTagsWithResponse call
func ParseGetFollowedTagsResponse(rsp *http.Response) (*GetFollowedTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFollowedTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FollowedTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgArticlesResponse parses an HTTP response from a GetOrgArticlesWithResponse call
func ParseGetOrgArticlesResponse(rsp *http.Response) (*GetOrgArticlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgArticlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgUsersResponse parses an HTTP response from a GetOrgUsersWithResponse call
func ParseGetOrgUsersResponse(rsp *http.Response) (*GetOrgUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPagesResponse parses an HTTP response from a GetApiPagesWithResponse call
func ParseGetApiPagesResponse(rsp *http.Response) (*GetApiPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPagesResponse parses an HTTP response from a PostApiPagesWithResponse call
func ParsePostApiPagesResponse(rsp *http.Response) (*PostApiPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiPagesIdResponse parses an HTTP response from a DeleteApiPagesIdWithResponse call
func ParseDeleteApiPagesIdResponse(rsp *http.Response) (*DeleteApiPagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPagesIdResponse parses an HTTP response from a GetApiPagesIdWithResponse call
func ParseGetApiPagesIdResponse(rsp *http.Response) (*GetApiPagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPagesIdResponse parses an HTTP response from a PutApiPagesIdWithResponse call
func ParsePutApiPagesIdResponse(rsp *http.Response) (*PutApiPagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPodcastEpisodesResponse parses an HTTP response from a GetPodcastEpisodesWithResponse call
func ParseGetPodcastEpisodesResponse(rsp *http.Response) (*GetPodcastEpisodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPodcastEpisodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PodcastEpisodeIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfileImageResponse parses an HTTP response from a GetProfileImageWithResponse call
func ParseGetProfileImageResponse(rsp *http.Response) (*GetProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiReactionsResponse parses an HTTP response from a PostApiReactionsWithResponse call
func ParsePostApiReactionsResponse(rsp *http.Response) (*PostApiReactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiReactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiReactionsToggleResponse parses an HTTP response from a PostApiReactionsToggleWithResponse call
func ParsePostApiReactionsToggleResponse(rsp *http.Response) (*PostApiReactionsToggleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiReactionsToggleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReadinglistResponse parses an HTTP response from a GetReadinglistWithResponse call
func ParseGetReadinglistResponse(rsp *http.Response) (*GetReadinglistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReadinglistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArticleIndex
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserMeResponse parses an HTTP response from a GetUserMeWithResponse call
func ParseGetUserMeResponse(rsp *http.Response) (*GetUserMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSuspendUserResponse parses an HTTP response from a SuspendUserWithResponse call
func ParseSuspendUserResponse(rsp *http.Response) (*SuspendUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuspendUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishUserResponse parses an HTTP response from a UnpublishUserWithResponse call
func ParseUnpublishUserResponse(rsp *http.Response) (*UnpublishUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnpublishUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVideosResponse parses an HTTP response from a VideosWithResponse call
func ParseVideosResponse(rsp *http.Response) (*VideosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VideoArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
